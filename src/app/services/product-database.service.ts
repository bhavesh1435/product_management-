import { Injectable } from '@angular/core';
import { openDB, IDBPDatabase } from 'idb';

export interface Product {
  id?: number; // id is optional, as it will be auto-generated by IndexedDB
  name: string;
  price: number;
  category: string;
  inStock: boolean;
}

@Injectable({
  providedIn: 'root',
})
export class ProductDatabaseService {
  private dbPromise: Promise<IDBPDatabase>;

  constructor() {
    this.dbPromise = openDB('ProductDB', 1, {
      upgrade(db) {
        if (!db.objectStoreNames.contains('products')) {
          // Create object store with autoIncrement for the 'id' field
          db.createObjectStore('products', { keyPath: 'id', autoIncrement: true });
        }
      },
    });
  }

  // Fetch all products from the IndexedDB
  async getProducts(): Promise<Product[]> {
    const db = await this.dbPromise;
    return db.getAll('products');
  }

  // Add a new product, ensuring the id is not passed (it will be auto-generated)
  async addProduct(product: Product): Promise<void> {
    const db = await this.dbPromise;
    
    // Remove the id property if it's set, as it will be auto-generated
    const { id, ...productWithoutId } = product;

    // Add the product without the id
    await db.add('products', productWithoutId);
  }

  // Update an existing product by its id
  async updateProduct(product: Product): Promise<void> {
    const db = await this.dbPromise;
    await db.put('products', product);
  }

  // Delete a product by its id
  async deleteProduct(id: number): Promise<void> {
    const db = await this.dbPromise;
    await db.delete('products', id);
  }
}
